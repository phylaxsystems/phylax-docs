name: Aggregate Multiple Repo Docs

on:
  workflow_dispatch:
  push:
    branches:
      - "**"
  schedule:
    - cron: "0 0 * * *"

env:
  GITHUB_ORG: phylaxsystems
  REPO_LIST: '["phylax-monitor", "phylax-std"]'

jobs:
  aggregate-docs:
    runs-on: ubuntu-latest
    name: Aggregate docs from multiple repos
    steps:
      - name: Checkout docs repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Get current branch name
        id: branch-name
        uses: tj-actions/branch-names@v8

      - name: Fetch docs from multiple repos
        run: |
          REPOS=$(echo $REPO_LIST | jq -r '.[]')
          for repo in $REPOS; do
            echo "Fetching docs from $repo"
            git clone --depth 1 --filter=blob:none --sparse https://${{ secrets.GH_TOKEN }}@github.com/${{ env.GITHUB_ORG }}/$repo.git temp/$repo
            cd temp/$repo
            git sparse-checkout set docs

            if ! git checkout ${{ steps.branch-name.outputs.current_branch }}; then
              if ! git checkout main; then
                echo "Failed to checkout main branch. Available branches:"
                git branch -r
                echo "Checking out the default branch:"
                git checkout $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
              fi
            fi

            cd ../..
            echo "Contents of temp/$repo:"
            ls -R temp/$repo
          done
        continue-on-error: true

      - name: Debug repo fetches
        if: failure()
        run: |
          REPOS=$(echo $REPO_LIST | jq -r '.[]')
          for repo in $REPOS; do
            echo "Debugging $repo:"
            echo "Contents of temp/$repo:"
            ls -R temp/$repo
            echo "Git status in $repo:"
            cd temp/$repo
            git status
            git branch -a
            echo "Default branch:"
            git symbolic-ref refs/remotes/origin/HEAD
            cd ../..
          done

      - name: Organize docs
        run: |
          REPOS=$(echo $REPO_LIST | jq -r '.[]')
          for repo in $REPOS; do
            mkdir -p $repo
            if [ -d "temp/$repo/docs" ]; then
              cp -R temp/$repo/docs/* $repo/
            else
              echo "No docs folder found in $repo"
            fi
          done
          rm -rf temp

      - name: Update mint.json
        run: |
          # Implement logic to update mint.json
          echo "Updating mint.json"
          # Add your mint.json update logic here

      - name: Get commit message
        id: get-commit-message
        run: |
          echo "commit_message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: |
            Update docs from multiple repos
          file_pattern: "**/*"
          branch: ${{ steps.branch-name.outputs.current_branch }}
