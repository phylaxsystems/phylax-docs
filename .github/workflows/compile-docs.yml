name: Aggregate Phylax Docs

on:
  workflow_dispatch:
  push:
    branches:
      - "**"
  schedule:
    - cron: "0 0 * * *"

jobs:
  aggregate-docs:
    runs-on: ubuntu-latest
    name: Aggregate Phylax docs
    steps:
      - name: Checkout docs repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Get current branch name
        id: branch-name
        uses: tj-actions/branch-names@v8

      - name: Fetch docs from phylax-monitor repo
        run: |
          git clone --depth 1 --filter=blob:none --sparse https://${{ secrets.GH_TOKEN }}@github.com/phylaxsystems/phylax-monitor.git temp/phylax-monitor
          cd temp/phylax-monitor
          git sparse-checkout set docs

          # Try to checkout the current branch, then main, then list available branches
          if ! git checkout ${{ steps.branch-name.outputs.current_branch }}; then
            if ! git checkout main; then
              echo "Failed to checkout main branch. Available branches:"
              git branch -r
              echo "Checking out the default branch:"
              git checkout $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
            fi
          fi

          cd ../..
          echo "Contents of temp/phylax-monitor:"
          ls -R temp/phylax-monitor
        continue-on-error: true

      - name: Debug Phylax Monitor repo fetch
        if: failure()
        run: |
          echo "Current directory:"
          pwd
          echo "Contents of temp directory:"
          ls -R temp
          echo "Git status in phylax-monitor repo:"
          cd temp/phylax-monitor
          git status
          git branch -a
          echo "Default branch:"
          git symbolic-ref refs/remotes/origin/HEAD
          cd ../..

      - name: Organize docs
        run: |
          mkdir -p phylax-monitor
          cp -R temp/phylax-monitor/docs/* phylax-monitor/
          rm -rf temp

      - name: Update mint.json
        run: |
          # Implement logic to update mint.json
          echo "Updating mint.json"
          # Add your mint.json update logic here

      - name: Get commit message
        id: get-commit-message
        run: |
          echo "commit_message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: |
            Update docs
          file_pattern: "**/*"
          branch: ${{ steps.branch-name.outputs.current_branch }}
